# Check amount
amount <- as.numeric(amount)
if (is.na(amount)) {
stop(simpleError("Please specify valid amount of purchase."))
}
if (amount <= 0) {
stop(simpleError("Please specify valid amount of purchase."))
}
# Return new input
data.frame(item_desc = item_desc, date_pay = date_pay,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = Today, status = ,
stringsAsFactors = FALSE)
}
DataFile <- "database.RData"
ArchiveFolder <- "archive"
if (!dir.exists(ArchiveFolder)) {
dir.create(ArchiveFolder)
}
Today <- Sys.Date()
form_input <- function(item_desc = "", date_pay = Sys.Date(),
person_pay, person_share = "both", amount = 0) {
# Check item description
if (item_desc %in% c("", " ")) {
warning(simpleWarning(
"You are not required but are advised to describe your purchase."
))
}
# Check date of purchase
if (class(date_pay) != "Date") {
date_pay <- as.Date(date_pay)
}
if (is.na(date_pay)) {
stop(simpleError(
"Please specify correct date of purchase. Default is current date."
))
} else {
if (date_pay > Today) {
stop(simpleError("Please specify a reasonable date of purchase."))
}
# Check the person who paid and people to share the expense. If the amount
# should only be born by one person, `person_share` should be that person.
person_pay <- match.arg(arg = person_pay,
choices = c("Ginny Li", "Ning Yilin"))
person_share <- match.arg(arg = person_share,
choices = c("both", "Ginny Li", "Ning Yilin"))
# Decide status based on person_pay and person_share: if they are the same,
# this entry is simply for bill keeping and does not need to be included in
# caculation.
if (person_pay == person_share) {
status <- "ignore"
} else {
status <- "due"
}
# Check amount
amount <- as.numeric(amount)
if (is.na(amount)) {
stop(simpleError("Please specify valid amount of purchase."))
}
if (amount <= 0) {
stop(simpleError("Please specify valid amount of purchase."))
}
# Return new input
data.frame(item_desc = item_desc, date_pay = date_pay,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = Today, status = ,
stringsAsFactors = FALSE)
}
add_input <- function(item_desc, date_pay, person_pay, person_share, amount) {
}
rm(add_input)
form_input(item_desc = "GNC", date_pay = "2017-07-16", person_pay = "Ning Yilin", person_share = "Ning Yilin", amount = 189.34)
form_input <- function(item_desc = "", date_pay = Sys.Date(),
person_pay, person_share = "both", amount = 0) {
# Check item description
if (item_desc %in% c("", " ")) {
warning(simpleWarning(
"You are not required but are advised to describe your purchase."
))
}
# Check date of purchase
if (class(date_pay) != "Date") {
date_pay <- as.Date(date_pay)
}
if (is.na(date_pay)) {
stop(simpleError(
"Please specify correct date of purchase. Default is current date."
))
} else {
if (date_pay > Today) {
stop(simpleError("Please specify a reasonable date of purchase."))
}
# Check the person who paid and people to share the expense. If the amount
# should only be born by one person, `person_share` should be that person.
person_pay <- match.arg(arg = person_pay,
choices = c("Ginny Li", "Ning Yilin"))
person_share <- match.arg(arg = person_share,
choices = c("both", "Ginny Li", "Ning Yilin"))
# Decide status based on person_pay and person_share: if they are the same,
# this entry is simply for bill keeping and does not need to be included in
# caculation.
if (person_pay == person_share) {
status <- "ignore"
} else {
status <- "due"
}
# Check amount
amount <- as.numeric(amount)
if (is.na(amount)) {
stop(simpleError("Please specify valid amount of purchase."))
}
if (amount <= 0) {
stop(simpleError("Please specify valid amount of purchase."))
}
# Return new input
data.frame(item_desc = item_desc, date_pay = date_pay,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = Today, status = status,
stringsAsFactors = FALSE)
}
form_input(item_desc = "GNC", date_pay = "2017-07-16", person_pay = "Ning Yilin", person_share = "Ning Yilin", amount = 189.34)
input <- form_input(item_desc = "GNC", date_pay = "2017-07-16", person_pay = "Ning Yilin", person_share = "Ning Yilin", amount = 189.34)
check_input <- function(input) {
# Load database
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Check if similar input already exists
dup <- NULL
if (!is.null(database)) {
rows <- which(database$date_pay == input$date_pay &
database$amount == input$amount &
database$person_pay == input$person_pay &
database$person_share == input$person_share)
if (length(rows) > 0) {
dup <- database[rows, ]
}
list(input = input, duplicates = dup)
}
check_input(input)
load(DataFile) # R object: database
save(database, file = file.path(ArchiveFolder, paste0(database, Sys.Date())))
save(database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData")))
add_input <- function(input) {
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
save(
database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData"))
)
}
# Compile new input
database <- rbind(database, input)
save(database, file = DataFile)
input
}
input_ls <- check_input(input)
add_input(input_ls$input)
load("~/Google Drive/Projects/Active/BillManager/database.RData")
View(database)
calculate_input <- function(input) {
if (input$status != "due") {
return(0)
}
if (input$person_share == "both") {
if (input$person_pay == "Ning Yilin") {
input$amount / 2
} else {
-input$amount / 2
}
} else if (input$person_share == "Ning Yilin") {
-input$amount
} else {
input$amount
}
calculate_input(input)
input1 <- form_input(item_desc = "GNC", date_pay = "2017-07-16",
person_pay = "Ning Yilin", person_share = "Ning Yilin",
amount = 189.34)
input_ls <- check_input(input1)
add_input(input_ls$input1)
calculate_input(input1)
calculate_input <- function(input) {
if (input$status != "due") {
return(list(gl_to_pay_nyl = 0, input = input))
}
if (input$person_share == "both") {
if (input$person_pay == "Ning Yilin") {
gl_to_pay_nyl <- input$amount / 2
} else {
gl_to_pay_nyl <- -input$amount / 2
}
} else if (input$person_share == "Ning Yilin") {
gl_to_pay_nyl <- -input$amount
} else {
gl_to_pay_nyl <- input$amount
}
list(gl_to_pay_nyl = 0, input = input)
}
calculate_input <- function(input) {
if (input$status != "due") {
return(0)
}
if (input$person_share == "both") {
if (input$person_pay == "Ning Yilin") {
input$amount / 2
} else {
-input$amount / 2
}
} else if (input$person_share == "Ning Yilin") {
-input$amount
} else {
input$amount
}
gl_to_pay_nyl <- sum(sapply(which(database$status == "due"), function(i) {
calculate_input(input = database[i, ])
}))
gl_to_pay_nyl
View(database)
which(database$status == "due")
i = 1
database[i, ]
calculate_input(input = database[i, ])
sapply(which(database$status == "due"), function(i) {
calculate_input(input = database[i, ])
})
display_balance <- function(gl_to_pay_nyl) {
if (gl_to_pay_nyl > 0) {
sprintf(
"Ginny Li should pay Ning Yilin S$ %.2f.", gl_to_pay_nyl
)
} else if (gl_to_pay_nyl < 0) {
sprintf(
"Ning Yilin should pay Ginny Li S$ %.2f.", -gl_to_pay_nyl
)
} else {
"There is no outstanding balance. We are good."
}
calculate <- function() {
# Check whether there exist any records
if (!file.exists(data_file)) {
stop(simpleError("There is no record yet.\n"))
}
load(data_file)
# Check whether there is any outstanding balance
if (!any(database$status == "due")) {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
return(0)
}
# Compute outstanding balance
sum(sapply(which(database$status == "due"), function(i) {
calculate_input(input = database[i, ])
}))
}
balance <- calculate()
calculate <- function() {
# Check whether there exist any records
if (!file.exists(DataFile)) {
stop(simpleError("There is no record yet.\n"))
}
load(DataFile)
# Check whether there is any outstanding balance
if (!any(database$status == "due")) {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
return(0)
}
# Compute outstanding balance
sum(sapply(which(database$status == "due"), function(i) {
calculate_input(input = database[i, ])
}))
}
balance <- calculate()
balance
display_balance(balance)
3.23 == 3.23
add_input <- function(input) {
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
save(
database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData"))
)
}
# Compile new input
database <- rbind(database, input)
save(database, file = DataFile)
}
clear_balance <- function(amount_cleared = 0) {
# Check whether there exist any records
if (!file.exists(DataFile)) {
stop(simpleError("There is no record yet.\n"))
}
load(DataFile)
save(
database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData"))
)
# Check whether there is any outstanding balance
if (!any(database$status == "due")) {
message(simpleMessage("There is no outstanding balance.\n"))
return(NULL)
}
# Update database to clear outstanding balance
rows <- which(database$status == "due")
cat(length(rows), "items cleared:\n")
for (i in rows) {
print(database[i, ])
}
database$status[rows] <- "clear"
# Check whether there is any left_over
gl_to_pay_nyl <- calculate()
if (amount_cleared < abs(gl_to_pay_nyl)) {
if (gl_to_pay_nyl < 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ginny Li", person_share = "Ning Yilin",
amount = abs(gl_to_pay_nyl) - amount_cleared)
}
if (gl_to_pay_nyl > 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ning Yilin", person_share = "Ginny Li",
amount = gl_to_pay_nyl - amount_cleared)
}
add_input(input)
}
save(database, file = data_file)
}
input2 <- form_input(item_desc = "Bing", date_pay = "2017-07-16",
person_pay = "Ning Yilin", person_share = "both",
amount = 12.9)
input2
input3 <- form_input(item_desc = "Fairprice grocery", date_pay = "2017-07-16",
person_pay = "Ning Yilin", person_share = "both",
amount = 135)
input3
add_input(input2)
add_input(input3)
calculate()
clear_balance <- function(amount_cleared = NULL) {
# Check whether there exist any records
if (!file.exists(DataFile)) {
stop(simpleError("There is no record yet.\n"))
}
load(DataFile)
save(
database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData"))
)
# Check whether there is any outstanding balance
if (!any(database$status == "due")) {
message(simpleMessage("There is no outstanding balance.\n"))
return(NULL)
}
# Update database to clear outstanding balance
rows <- which(database$status == "due")
cat(length(rows), "items cleared:\n")
for (i in rows) {
print(database[i, ])
}
database$status[rows] <- "clear"
# Check whether there is any left_over
gl_to_pay_nyl <- calculate()
if (is.null(amount_cleared)) {
amount_cleared <- gl_to_pay_nyl
} else {
if (amount_cleared < abs(gl_to_pay_nyl)) {
if (gl_to_pay_nyl < 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ginny Li", person_share = "Ning Yilin",
amount = abs(gl_to_pay_nyl) - amount_cleared)
}
if (gl_to_pay_nyl > 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ning Yilin", person_share = "Ginny Li",
amount = gl_to_pay_nyl - amount_cleared)
}
add_input(input)
}
save(database, file = data_file)
}
clear_balance()
clear_balance <- function(amount_cleared = NULL) {
# Check whether there exist any records
if (!file.exists(DataFile)) {
stop(simpleError("There is no record yet.\n"))
}
load(DataFile)
save(
database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData"))
)
# Check whether there is any outstanding balance
if (!any(database$status == "due")) {
message(simpleMessage("There is no outstanding balance.\n"))
return(NULL)
}
# Update database to clear outstanding balance
rows <- which(database$status == "due")
# cat(length(rows), "items cleared:\n")
# for (i in rows) {
#   print(database[i, ])
# }
database$status[rows] <- "clear"
# Check whether there is any left_over
gl_to_pay_nyl <- calculate()
if (is.null(amount_cleared)) {
amount_cleared <- gl_to_pay_nyl
} else {
if (amount_cleared < abs(gl_to_pay_nyl)) {
if (gl_to_pay_nyl < 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ginny Li", person_share = "Ning Yilin",
amount = abs(gl_to_pay_nyl) - amount_cleared)
}
if (gl_to_pay_nyl > 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ning Yilin", person_share = "Ginny Li",
amount = gl_to_pay_nyl - amount_cleared)
}
add_input(input)
}
save(database, file = data_file)
database[rows, ]
}
clear_balance <- function(amount_cleared = NULL) {
# Check whether there exist any records
if (!file.exists(DataFile)) {
stop(simpleError("There is no record yet.\n"))
}
load(DataFile)
save(
database,
file = file.path(ArchiveFolder, paste0("database", Sys.Date(), ".RData"))
)
# Check whether there is any outstanding balance
if (!any(database$status == "due")) {
message(simpleMessage("There is no outstanding balance.\n"))
return(NULL)
}
# Update database to clear outstanding balance
rows <- which(database$status == "due")
# cat(length(rows), "items cleared:\n")
# for (i in rows) {
#   print(database[i, ])
# }
database$status[rows] <- "clear"
# Check whether there is any left_over
gl_to_pay_nyl <- calculate()
if (is.null(amount_cleared)) {
amount_cleared <- gl_to_pay_nyl
} else {
if (amount_cleared < abs(gl_to_pay_nyl)) {
if (gl_to_pay_nyl < 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ginny Li", person_share = "Ning Yilin",
amount = abs(gl_to_pay_nyl) - amount_cleared)
}
if (gl_to_pay_nyl > 0) {
input <- form_input(item_desc = "Yet to be cleared", date_pay = Today,
person_pay = "Ning Yilin", person_share = "Ginny Li",
amount = gl_to_pay_nyl - amount_cleared)
}
add_input(input)
}
save(database, file = DataFile)
database[rows, ]
}
clear_balance()
load_database <- function() {
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
database
}
source('~/Google Drive/Projects/Active/BillManager/functions.R')
install.packages("DT")
shiny::runApp()
runApp()
database <- load_database()
View(database)
database[sort.list(database$date_input, decreasing = TRUE), ]
DT::datatable(database, rownames = FALSE)
output$view_data <- DT::renderDataTable({
DT::datatable(database, rownames = FALSE)
})
runApp()
rm(list  = ls())
runApp()
load_database()
database <- load_database()
database <- cbind(row_id = 1:7, database)
database
save(database, file = "database.RData")
delete_entry <- function(row_id) {
database <- load_database()
database <- database[!(database$row_id %in% row_id), ]
save(database, file = "database.RData")
}
delete_entry(7)
load_database()
runApp()
rm(list = ls())
runApp()
shiny::runApp()
